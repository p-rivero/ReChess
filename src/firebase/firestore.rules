rules_version = '2';

// Unless otherwise specified, top-level documents are publically readable by anyone,
// and only the owner can write to them. The subcollection "private" is only readable
// and writable by the owner.
// If a document contains the field "SERVER", then all writes attempting to modify
// that field will be rejected. This field contains data that can be read by anyone
// with read access to the document, but can only be modified by a server-side function.

// See firestore.d.ts for the database schema

function isAuth(id) {
  return isAuthUnverified(id) && request.auth.token.email_verified;
}
function isAuthUnverified(id) {
  return request.auth != null && request.auth.uid != null && debug(request.auth.uid) == string(id);
}
function mapEq(mapA, mapB) {
  return mapA.diff(mapB).affectedKeys().size() == 0;
}
function serverUnchanged() {
  return mapEq(request.resource.data.SERVER, resource.data.SERVER);
}


service cloud.firestore {
  match /databases/{database}/documents {
    // Uncomment to allow read/write access on all documents to all users
    // match /{document=**} {
    //   allow read, write;
    // }
    
    match /users/{userId} {
      allow read;
      allow update: if isAuth(userId) && serverUnchanged();
      
      // When creating a user, the user must be authenticated and the starting data must be correct. Allow unverified accounts, since at the time of creation, the user has not yet verified their email.
      allow create: if
        isAuthUnverified(userId) &&
        (request.resource.data.name == null || request.resource.data.name == request.auth.token.name) &&
        request.resource.data.about == '' &&
        (request.resource.data.profileImg == null || request.resource.data.profileImg == request.auth.token.picture) &&
        request.resource.data.SERVER.username.size() >= 3 &&
        request.resource.data.SERVER.username.size() <= 25 &&
        request.resource.data.SERVER.username.matches('^[a-zA-Z0-9_]+$') &&
        request.resource.data.SERVER.numWins == 0;
        
      // Disallow deleting users for now
      allow delete: if false;
      
      // Subcollection with a single document for data that other users cannot read
      match /private/{doc} {
        allow read: if isAuth(userId);
        allow update: if isAuth(userId) && serverUnchanged();
          
        allow create: if
          isAuthUnverified(userId) &&
          request.resource.data.SERVER.email == request.auth.token.email &&
          request.resource.data.SERVER.banned == false;
        
        allow delete: if false;
      }
      
      // Subcollection with a single document for data that the user cannot modify
      // but everyone can read
      match /server/{serverPrivateDoc} {
        allow read;
        allow write: if false;
      }
    }
    
    
    match /variants/{variantId} {
      allow read;
      // Create if authenticated, update if authenticated and creator
      allow create: if isAuth(request.resource.data.creatorId);
      allow update: if isAuth(resource.data.creatorId);
    }
    
  }
}
