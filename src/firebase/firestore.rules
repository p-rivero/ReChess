rules_version = '2';

// Unless otherwise specified, top-level documents are publically readable by anyone,
// and only the owner can write to them. The subcollection "private" is only readable
// and writable by the owner.
// If a document contains the field "SERVER", then all writes attempting to modify
// that field will be rejected. This field contains data that can be read by anyone
// with read access to the document, but can only be modified by a server-side function.

// See firestore.d.ts for the database schema


// HELPER FUNCTIONS

// Returns true if the user is authenticated and has the given id
function isAuth(id) {
  return isAuthUnverified(id) && request.auth.token.email_verified;
}
// Same as isAuth, but does not require the email to be verified
function isAuthUnverified(id) {
  return request.auth != null && request.auth.uid != null && request.auth.uid == id;
}

// Checks that two maps are equal
function mapEq(mapA, mapB) {
  return mapA.diff(mapB).affectedKeys().size() == 0;
}
// Checks that the given field is null or equal to the given value
function nullOrEq(nullable, val) {
  return nullable == null || nullable == val;
}

// Checks that the request contains all the required fields and no extra extra fields
function hasCorrectFields(required, optional) {
  let allowed = required.concat(optional);
  return request.resource.data.keys().hasAll(required) && request.resource.data.keys().hasOnly(allowed);
}
// Same as hasCorrectFields, but checks the SERVER field
function serverHasCorrectFields(required, optional) {
  let allowed = required.concat(optional);
  return request.resource.data.SERVER.keys().hasAll(required) && request.resource.data.SERVER.keys().hasOnly(allowed);
}
// Checks that the SERVER field has not changed
function serverUnchanged() {
  return mapEq(request.resource.data.SERVER, resource.data.SERVER);
}


service cloud.firestore {
  match /databases/{database}/documents {
    
    function usernameIsTaken(username) {
      return exists(/databases/$(database)/documents/usernames/$(username));
    }
    function isValidUsername(username) {
      return username.size() >= 3 &&
        username.size() <= 25 &&
        username.matches('^[a-zA-Z0-9_]+$');
    }
    
    
    match /usernames/{username} {
      allow read;
      allow create: if
        // When creating a user, the user must be authenticated and the starting data must be correct. Allow unverified accounts, since at the time of creation, the user has not yet verified their email.
        isAuthUnverified(request.resource.data.userId) &&
        isValidUsername(username) &&
        !usernameIsTaken(username) &&
        // Username must be registered batched with a user document
        getAfter(/databases/$(database)/documents/users/$(request.resource.data.userId)).data.SERVER.username == username;
      
      allow update: if false;
      
      // Disallow deleting usernames for now
      allow delete: if false;
    }
    
    match /users/{userId} {
      
      function isUserDoc() {
        return hasCorrectFields(['about', 'SERVER'], ['name', 'profileImg']) &&
          serverHasCorrectFields(['username', 'numWins'], []);
      }
      function isPrivateUserDoc() {
        return hasCorrectFields(['SERVER'], []) &&
          serverHasCorrectFields(['email', 'banned'], []);
      }
      
      allow read;
      allow update: if isUserDoc() && isAuth(userId) && serverUnchanged();
      
      allow create: if
        isUserDoc() &&
        isAuthUnverified(userId) &&
        nullOrEq(request.resource.data.name, request.auth.token.name) &&
        request.resource.data.about == '' &&
        nullOrEq(request.resource.data.profileImg, request.auth.token.picture) &&
        // Username is correct and not taken
        isValidUsername(request.resource.data.SERVER.username) &&
        !usernameIsTaken(request.resource.data.SERVER.username) &&
        request.resource.data.SERVER.numWins == 0 &&
        // Username must be registered batched with a user document
        getAfter(/databases/$(database)/documents/usernames/$(request.resource.data.SERVER.username)).data.userId == userId;
        
      // Disallow deleting users for now
      allow delete: if false;
      
      
      match /private/{doc} {
        allow read: if isAuth(userId);
        allow update: if isPrivateUserDoc() && isAuth(userId) && serverUnchanged();
          
        allow create: if
          isPrivateUserDoc() &&
          isAuthUnverified(userId) &&
          request.resource.data.SERVER.email == request.auth.token.email &&
          request.resource.data.SERVER.banned == false;
        
        allow delete: if false;
      }
    }
    
    
    match /variants/{variantId} {
      allow read;
      // Create if authenticated, update if authenticated and creator
      allow create: if isAuth(request.resource.data.creatorId);
      allow update: if isAuth(resource.data.creatorId);
    }
    
  }
}
