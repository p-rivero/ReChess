rules_version = '2';

function loggedAs(id) {
  return request.auth.uid != null && request.auth.uid == id && request.auth.token.email_verified;
}
function authMetadata() {
  return userId in request.resource.metadata && loggedAs(request.resource.metadata.userId);
}

function sizeKib(maxSizeKibibytes) {
  return request.resource.size < maxSizeKibibytes * 1024;
}

function isImage() {
  let contentType = request.resource.contentType;
  return contentType != null && contentType.matches('image/.*');
}

service firebase.storage {
  // When deployed, bucket == "rechess-web-piece-images". This is not true in unit tests.
  match /b/{bucket}/o {
    match /piece-images/{imageName} {
      // Anyone can see the images
      allow read;
      
      // The client sets the file name to the SHA-256 hash of the file contents, so
      // collisions are very unlikely.
      // Storage rules seems to be unable to access the file's bytes, so we can't
      // check the hash here. See the checkPieceHash cloud function for that.
      // Store the piece images in a separate bucket, so that we can run the 
      // cloud function only when needed.
      allow create: if
        authMetadata() &&
        sizeKib(200) &&
        isImage() &&
        resource == null;
        
      // Cannot edit the metadata of an image or delete it, since other variants may reference it.
      allow update, delete: if false;
    }
  }
}
