rules_version = '2';

// Unless otherwise specified, top-level documents are publically readable by anyone,
// and only the owner can write to them. The subcollection "private" is only readable
// and writable by the owner.
// If a document contains the field "IMMUTABLE", then all writes attempting to modify
// that field will be rejected. This field contains data that can be read by anyone
// with read access to the document, but can only be modified by a server-side function.

// See ./schema.d.ts for the database schema
// See test/firebase/firestore.spec.ts for tests


// HELPER FUNCTIONS

// Returns true if the user is authenticated and has the given id
function loggedAs(id) {
  return loggedAsUnverified(id) && request.auth.token.email_verified;
}
// Same as loggedAs, but does not require the email to be verified
function loggedAsUnverified(id) {
  return request.auth.uid != null && request.auth.uid == id;
}
function isModerator() {
  return request.auth != null && request.auth.token.moderator;
}

// Checks that a field was created with serverTimestamp()
function isServerTimestamp(field) {
  return field == request.time;
}

// Checks that two maps are equal
function unchanged(objA, objB) {
  return objA.diff(objB).affectedKeys().size() == 0;
}
// Checks that a map has all the required fields and no extra extra fields
function hasFields(obj, required, optional) {
  let allowed = required.concat(optional);
  return obj.keys().hasAll(required) && obj.keys().hasOnly(allowed);
}

// Returns true if the input string starts with the given prefix
function startsWith(str, prefix) {
  return prefix.size() == 0 || (
    str.size() >= prefix.size() &&
    str[0 : prefix.size()] == prefix
  );
}

// Prints the input to the debug log and returns true
// function print(msg) {
//   return debug(msg) || true;
// }


service cloud.firestore {
  match /databases/{database}/documents {
    
    function fetchUser(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    function usernameIsTaken(username) {
      return exists(/databases/$(database)/documents/usernames/$(username));
    }
    function isValidUsername(username) {
      return
        username.size() >= 3 &&
        username.size() <= 25 &&
        username.matches('^[a-zA-Z0-9_]+$');
    }
    // Returns the expected display name for the given user (use fetchUser() to get the user document)
    function expectedDisplayName(userDoc) {
      return userDoc.name == null ? '@' + userDoc.IMMUTABLE.username : userDoc.name;
    }
    
    
    
    match /usernames/{username} {
      function isUsernameDoc(doc) {
        return
          hasFields(doc, ['userId'], []) &&
          doc.userId is string &&
          doc.userId.size() > 0;
      }
      function allowCreateUsername() {
        let doc = request.resource.data;
        return
          isUsernameDoc(doc) &&
          // When creating a user, the user must be authenticated and the starting data must be correct.
          // Allow unverified accounts, since at the time of creation, the user has not yet verified their email.
          loggedAsUnverified(doc.userId) &&
          isValidUsername(username) &&
          !usernameIsTaken(username) &&
          // Username must be registered batched with a user document
          getAfter(/databases/$(database)/documents/users/$(doc.userId)).data.IMMUTABLE.username == username;
      }
    
      allow read;
      allow create: if allowCreateUsername();
      // Disallow deleting usernames, they are deleted by a cloud function
    }
    
    
    
    match /users/{userId} {
      function isUserDoc(doc) {
        return
          hasFields(doc, ['about', 'IMMUTABLE'], ['name', 'profileImg']) &&
          hasFields(doc.IMMUTABLE, ['username', 'numGamesPlayed', 'numWinPoints', 'last5Games',
              'lastGamesOpponentIds', 'lastGamesVariantIds'], ['renameAllowedAt']) &&
          doc.about is string &&
          doc.about.size() <= 1000 &&
          (doc.name == null || (
            doc.name is string &&
            doc.name.size() <= 50 &&
            doc.name.size() > 0 &&
            doc.name == doc.name.trim()
          )) &&
          (doc.profileImg == null || (
            doc.profileImg is string &&
            doc.profileImg.size() <= 600
          )) &&
          doc.IMMUTABLE.username is string &&
          (doc.IMMUTABLE.renameAllowedAt == null || (
            doc.IMMUTABLE.renameAllowedAt is timestamp
          )) &&
          doc.IMMUTABLE.numGamesPlayed is int &&
          doc.IMMUTABLE.numWinPoints is number && // 0.5 points for draw, not an int
          doc.IMMUTABLE.last5Games is string &&
          doc.IMMUTABLE.lastGamesOpponentIds is list &&
          doc.IMMUTABLE.lastGamesOpponentIds.size() <= 5 &&
          doc.IMMUTABLE.lastGamesVariantIds is list &&
          doc.IMMUTABLE.lastGamesVariantIds.size() <= 5;
      }
      function allowCreateUser() {
        let doc = request.resource.data;
        return
          isUserDoc(doc) &&
          loggedAsUnverified(userId) &&
          // Username is correct and not taken
          isValidUsername(doc.IMMUTABLE.username) &&
          !usernameIsTaken(doc.IMMUTABLE.username) &&
          doc.IMMUTABLE.renameAllowedAt == null &&
          doc.IMMUTABLE.numGamesPlayed == 0 &&
          doc.IMMUTABLE.numWinPoints == 0 &&
          doc.IMMUTABLE.last5Games == '[]' &&
          doc.IMMUTABLE.lastGamesOpponentIds.size() == 0 &&
          doc.IMMUTABLE.lastGamesVariantIds.size() == 0 &&
          // User must be created in a batch with a username document
          getAfter(/databases/$(database)/documents/usernames/$(doc.IMMUTABLE.username)).data.userId == userId &&
          // User must be created in a batch with a private document
          existsAfter(/databases/$(database)/documents/users/$(userId)/private/doc);
      }
      function allowUpdateUser() {
        let old = resource.data;
        let new = request.resource.data;
        return
          isUserDoc(new) &&
          loggedAs(userId) &&
          unchanged(old.IMMUTABLE, new.IMMUTABLE) &&
          // If the user changed their name, check that they waited long enough
          (old.name != new.name ? (
            old.IMMUTABLE.renameAllowedAt == null ||
            request.time >= old.IMMUTABLE.renameAllowedAt
          ) : true);
      }
      
      allow read;
      allow create: if allowCreateUser();
      allow update: if allowUpdateUser();
      // Disallow deleting users directly, they are deleted by a cloud function
      
      
      match /private/{docName} {
        function isPrivateUserDoc(doc) {
          return
            hasFields(doc, ['IMMUTABLE'], []) &&
            hasFields(doc.IMMUTABLE, ['email'], []) &&
            doc.IMMUTABLE.email is string;
        }
        function allowCreateUserPrivate() {
          let doc = request.resource.data;
          return
            isPrivateUserDoc(doc) &&
            loggedAsUnverified(userId) &&
            docName == 'doc' && // Only 1 document allowed
            doc.IMMUTABLE.email == request.auth.token.email;
        }
        function allowUpdateUserPrivate() {
          let old = resource.data;
          let new = request.resource.data;
          return
            isPrivateUserDoc(new) &&
            loggedAs(userId) &&
            unchanged(old.IMMUTABLE, new.IMMUTABLE);
        }
        
        allow read: if loggedAs(userId);
        allow create: if allowCreateUserPrivate();
        allow update: if allowUpdateUserPrivate();
      }
      
      
      function isTimestampDoc(doc) {
        return
          hasFields(doc, ['time'], []) &&
          doc.time is timestamp;
      }
      function isReportDoc(doc) {
        return
          hasFields(doc, ['time', 'reason', 'onlyBlock'], []) &&
          doc.time is timestamp &&
          doc.reason is string &&
          doc.reason.size() <= 250 &&
          doc.onlyBlock is bool &&
          // If onlyBlock, reason must be empty
          (doc.onlyBlock ? doc.reason.size() == 0 : true);
      }
      
      match /upvotedVariants/{variantId} {
        function allowCreateUpvote() {
          let doc = request.resource.data;
          return
            isTimestampDoc(doc) &&
            loggedAs(userId) &&
            isServerTimestamp(doc.time) &&
            exists(/databases/$(database)/documents/variants/$(variantId));
        }
        function allowDeleteUpvote() {
          let doc = resource.data;
          return
            // Fail if the document does not exist, to avoid triggering a cloud function
            isTimestampDoc(doc) &&
            loggedAs(userId);
        }
        // Other users cannot see my upvotes
        allow read: if loggedAs(userId);
        allow create: if allowCreateUpvote();
        allow delete: if allowDeleteUpvote();
      }
      
      match /reportedVariants/{variantId} {
        function allowCreateVariantReport() {
          let doc = request.resource.data;
          return
            isReportDoc(doc) &&
            loggedAs(userId) &&
            isServerTimestamp(doc.time) &&
            // Cannot block variants, just report them
            doc.onlyBlock == false &&
            exists(/databases/$(database)/documents/variants/$(variantId));
        }
        // Other users cannot see my reports
        allow read: if loggedAs(userId);
        allow create: if allowCreateVariantReport();
      }
      
      match /reportedUsers/{reportedUserId} {
        function allowCreateUserReport() {
          let doc = request.resource.data;
          return
            isReportDoc(doc) &&
            loggedAs(userId) &&
            reportedUserId != userId &&
            isServerTimestamp(doc.time) &&
            exists(/databases/$(database)/documents/users/$(reportedUserId));
        }
        // Other users cannot see my reports
        allow read: if loggedAs(userId);
        allow create: if allowCreateUserReport();
      }
      
      match /privateCache/{docName} {
        // Read-only. Allow unverified, so that it can be read at creation time.
        allow read: if loggedAsUnverified(userId) && docName == 'doc';
      }
      
      
      match /renameTrigger/{docName} {
        function isRenameTriggerDoc(doc) {
          let userDoc = getAfter(/databases/$(database)/documents/users/$(userId)).data;
          return
            docName == 'doc' && // Only 1 document allowed
            hasFields(doc, ['username'], ['name']) &&
            doc.name == userDoc.name &&
            doc.username == userDoc.IMMUTABLE.username;
        }
        function allowCreateRenameTrigger() {
          let doc = request.resource.data;
          return
            isRenameTriggerDoc(doc) &&
            // At account creation, the user is still unverified
            loggedAsUnverified(userId);
        }
        function allowUpdateRenameTrigger() {
          let old = resource.data;
          let new = request.resource.data;
          return
            isRenameTriggerDoc(new) &&
            loggedAs(userId) &&
            old.name != new.name;
        }
        
        allow read: if loggedAs(userId);
        allow create: if allowCreateRenameTrigger();
        allow update: if allowUpdateRenameTrigger();
      }
    }
    
    
    
    match /variants/{variantId} {
      function isVariantDoc(doc) {
        return
          hasFields(doc,
            ['name', 'description', 'creationTime', 'creatorDisplayName', 'initialState', 'numUpvotes', 'popularity', 'tags'],
            ['creatorId']
          ) &&
          doc.name is string &&
          doc.name.size() >= 3 &&
          doc.name.size() <= 50 &&
          doc.name == doc.name.trim() &&
          doc.description is string &&
          doc.description.size() <= 1000 &&
          doc.creationTime is timestamp &&
          doc.creatorDisplayName is string &&
          doc.initialState is string &&
          doc.initialState.size() <= 200000 &&
          doc.numUpvotes is int &&
          doc.popularity is int &&
          doc.tags is list &&
          doc.tags.size() <= 7 &&
          (doc.creatorId == null || doc.creatorId is string);
      }
      function allowCreateVariant() {
        let doc = request.resource.data;
        let creatorDoc = fetchUser(doc.creatorId);
        return
          isVariantDoc(doc) &&
          // Creator can be null if their account has been deleted, but not when creating the variant
          loggedAs(doc.creatorId) &&
          doc.creatorDisplayName == expectedDisplayName(creatorDoc) &&
          isServerTimestamp(doc.creationTime) &&
          doc.numUpvotes == 0 &&
          doc.popularity == 0;
      }
      
      allow read;
      allow create: if allowCreateVariant();
      // Disallow editing and deleting variants
      
      
      match /lobby/{creatorUserId} {
        function isLobbySlotDoc(doc) {
          return
            hasFields(doc, ['IMMUTABLE'], ['challengerId', 'challengerDisplayName', 'challengerImageUrl']) &&
            hasFields(doc.IMMUTABLE, ['creatorDisplayName', 'timeCreated', 'requestedColor'], ['creatorImageUrl', 'gameDocId']) &&
            doc.IMMUTABLE.creatorDisplayName is string &&
            doc.IMMUTABLE.timeCreated is timestamp &&
            doc.IMMUTABLE.requestedColor in ['white', 'black', 'random'] &&
            (doc.IMMUTABLE.gameDocId == null || doc.IMMUTABLE.gameDocId is string) &&
            (doc.IMMUTABLE.creatorImageUrl == null || doc.IMMUTABLE.creatorImageUrl is string) &&
            (doc.challengerId == null || doc.challengerId is string) &&
            (doc.challengerDisplayName == null || doc.challengerDisplayName is string) &&
            (doc.challengerImageUrl == null || doc.challengerImageUrl is string);
        }
        function checkUserNameAndImage(userId, expectedName, expectedImage) {
          // Fetch the user doc only when strictly necessary
          let userDoc = fetchUser(userId);
          return
            expectedName == expectedDisplayName(userDoc) &&
            expectedImage == userDoc.profileImg;
        }
        function allowCreateLobbySlot() {
          let doc = request.resource.data;
          return
            isLobbySlotDoc(doc) &&
            loggedAs(creatorUserId) &&
            exists(/databases/$(database)/documents/variants/$(variantId)) &&
            checkUserNameAndImage(creatorUserId, doc.IMMUTABLE.creatorDisplayName, doc.IMMUTABLE.creatorImageUrl) &&
            isServerTimestamp(doc.IMMUTABLE.timeCreated) &&
            doc.IMMUTABLE.gameDocId == null &&
            // Creator initializes the slot with no challenger
            doc.challengerId == null &&
            doc.challengerDisplayName == null &&
            doc.challengerImageUrl == null;
        }
        function allowUpdateLobbySlot() {
          let old = resource.data;
          let new = request.resource.data;
          return
            isLobbySlotDoc(new) &&
            unchanged(old.IMMUTABLE, new.IMMUTABLE) &&
            // Cannot change the lobby slot once the game has been created, only delete it
            old.IMMUTABLE.gameDocId == null &&
            // Challenger clicks "Join"
            ((
              loggedAs(new.challengerId) &&
              old.challengerId == null &&
              new.challengerId != creatorUserId &&
              checkUserNameAndImage(new.challengerId, new.challengerDisplayName, new.challengerImageUrl)
            )
            // Challenger clicks "Cancel", or creator rejects challenger
            || (
              (loggedAs(old.challengerId) || loggedAs(creatorUserId)) &&
              new.challengerId == null &&
              new.challengerDisplayName == null &&
              new.challengerImageUrl == null
            ));
        }
        function allowDeleteLobbySlot() {
          let doc = resource.data;
          return
            isLobbySlotDoc(doc) &&
            // Creator cancels the game, OR
            // Challenger acknowledges the created game and clears the slot
            (loggedAs(creatorUserId) || (loggedAs(doc.challengerId) && doc.IMMUTABLE.gameDocId != null));
        }
        
        allow read;
        allow create: if allowCreateLobbySlot();
        allow update: if allowUpdateLobbySlot();
        allow delete: if allowDeleteLobbySlot();
      }
    }
    
    
    
    // Read-only access to variantIndex
    match /variantIndex/{docName} {
      allow read;
    }
    
    
    
    match /games/{gameId} {
      function isGameDoc(doc) {
        let HISTORY_REGEX = '^([a-p][0-9]{1,2}[a-p][0-9]{1,2}(=..?)? )*$';
        return
          hasFields(doc, ['moveHistory', 'playerToMove', 'IMMUTABLE'], ['winner']) &&
          hasFields(doc.IMMUTABLE, ['timeCreated', 'variantId', 'variant', 'whiteDisplayName', 'blackDisplayName',
              'requestedColor', 'players', 'calledFinishGame'], ['whiteId', 'blackId']) &&
          doc.moveHistory is string &&
          doc.moveHistory.size() <= 10000 &&
          doc.moveHistory.matches(HISTORY_REGEX) &&
          (doc.winner == null ? (
            doc.playerToMove in ['white', 'black']
          ) : (
            doc.playerToMove == 'game-over' &&
            doc.winner in ['white', 'black', 'draw']
          ));
          // Don't check immutable fields, they are set by a cloud function
      }
      function numMoves(history) {
        return history.split(' ').size();
      }
      function allowUpdateGame() {
        let old = resource.data;
        let new = request.resource.data;
        return
          isGameDoc(new) &&
          unchanged(old.IMMUTABLE, new.IMMUTABLE) &&
          // Only allow appending 1 move to the move history
          startsWith(new.moveHistory, old.moveHistory) &&
          numMoves(new.moveHistory) == numMoves(old.moveHistory) + 1 &&
          // Must pass the turn to the other player
          new.playerToMove != old.playerToMove &&
          // Must be logged in as the player whose turn it is
          (
            old.playerToMove == 'white' && loggedAs(old.IMMUTABLE.whiteId) ||
            old.playerToMove == 'black' && loggedAs(old.IMMUTABLE.blackId)
          ) &&
          // If the game is over, make sure the gameOverTrigger has been created
          (new.winner != null ? (
            existsAfter(/databases/$(database)/documents/games/$(gameId)/gameOverTrigger/doc)
          ) : true);
      }
      
      allow read;
      allow update: if allowUpdateGame();
      // Games can only be created and deleted by cloud functions
      
      // Document that triggers the cloud function finishGame() when created
      match /gameOverTrigger/{docName} {
        function allowCreateGameOverTrigger() {
          let doc = request.resource.data;
          let gameDoc = getAfter(/databases/$(database)/documents/games/$(gameId)).data;
          return
            (loggedAs(gameDoc.IMMUTABLE.whiteId) || loggedAs(gameDoc.IMMUTABLE.blackId)) &&
            docName == 'doc' &&
            hasFields(doc, ['gameOverTime'], []) &&
            doc.gameOverTime is timestamp &&
            isServerTimestamp(doc.gameOverTime) &&
            gameDoc.winner != null &&
            gameDoc.playerToMove == 'game-over';
        }
        // Don't allow users to read, update, or delete this document, only create it
        allow create: if allowCreateGameOverTrigger();
      }
    }
    
    
    
    // MODERATION
    // Regular users cannot read or write to these collections
    
    // cancelGame() stores cancelled games here so moderators can review them
    match /cancelledGames/{gameId} {
      allow read: if isModerator();
    }
    
    match /userModeration/{userId} {
      allow read: if isModerator();
    }
    
    match /variantModeration/{variantId} {
      allow read: if isModerator();
    }
  }
}
